
ok tell me exactly what i have to do for each step and provide me with the code. keep in mind to only show me the code you changed but tell me exactly where you changed it .
app/models.py:

Why: To add database columns to the ChallengeGroup table for storing the currently active penalty (active_penalty_name, active_penalty_description, penalty_assigned_at).
Action: Add these new Column definitions. Run database migrations (flask db migrate, flask db upgrade).

app/routes/challenge_api.py:

Why: To create new API endpoints that allow the frontend to set or clear the active penalty for a specific group.
Action: Add two new routes/functions:
POST /api/challenge/groups/<int:group_id>/set_penalty: Takes penalty details, verifies user is a member, updates the group's penalty columns in the DB.
DELETE /api/challenge/groups/<int:group_id>/penalty: Verifies user is a member, clears the group's penalty columns in the DB.
app/routes/main.py (challenge_view function):

Why: To fetch the active penalty information for each group from the database when loading a shared challenge.
Action: Modify the query or the processing loop for initial_groups_data to include the active_penalty_name, active_penalty_description, etc., for each group object being passed to the template.
app/templates/challenge.html:

Why: To add a placeholder element within the group card structure where the active penalty information will be displayed. Also needs a place for the "Clear Penalty" button.
Action: Inside the card-body of the group card structure (in both the server-side loop and the client-side <template id="groupCardTemplate">), add a specific div like <div class="active-penalty-display small mt-2" style="display: none;"></div>. Optionally, add a small <button class="btn btn-xs btn-outline-light clear-penalty-btn" style="display: none;">Clear</button> within or near this div.
app/static/js/challenge_penalty.js:

Why: To modify the penalty wheel logic. It should now only trigger if the user is in a group, use the correct player names (saved names or defaults) for the joined group, and call the new API endpoint to set the active penalty after a result is determined.
Action:
Modify initializePenaltyHandler to check penaltyPageConfig.userJoinedGroupId before attaching the listener (or check inside the handler).
Modify handleLostGameClick to get participants based on the joined group's player_names (from penaltyPageConfig).
Modify displayFinalResult to call POST /api/challenge/groups/<groupId>/set_penalty via apiFetch when a penalty is assigned.
app/static/js/challenge_view.js:

Why: To coordinate the display of the active penalty, handle the "Clear Penalty" button, and manage client-side state.
Action:
Ensure initialGroups data (including active penalty info) is read into challengeConfig.
Modify updateUIAfterMembershipChange (or add a new function called by it) to find the .active-penalty-display div in each card, update its content based on group.active_penalty from the config/data, and show/hide it appropriately. Also show/hide the "Clear Penalty" button based on membership.
Add a new event handler handleClearPenaltyClick to call the DELETE /api/.../penalty endpoint.
Attach a listener (likely delegated) for .clear-penalty-btn clicks.
Update client-side state (challengeConfig.initialGroups[...].active_penalty = null) on successful clear.
app/static/js/challenge_ui.js:

Why: Might need minor adjustments in addGroupToDOM or updateUIAfterMembershipChange to correctly handle the initial state or structure related to the new active penalty display element.
Action: Review and potentially tweak rendering functions to ensure the .active-penalty-display div is handled correctly during card creation and updates.